import os
import logging
import tempfile
from pathlib import Path
import re
import shutil
import git
from datetime import datetime
import traceback
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
from img_text_converter import (
    extract_text_from_txt, 
    extract_text_from_docx, 
    process_text, 
    create_schedule_html, 
    update_index_html
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO,
    handlers=[
        logging.FileHandler("bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_USER_ID = os.environ.get("ADMIN_USER_ID")  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Telegram
REPO_URL = os.environ.get("REPO_URL")  # URL —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ GitHub
REPO_PATH = os.path.join(tempfile.gettempdir(), "church_repo")  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
GIT_USERNAME = os.environ.get("GIT_USERNAME")  # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub
GIT_EMAIL = os.environ.get("GIT_EMAIL")  # Email –Ω–∞ GitHub
GIT_TOKEN = os.environ.get("GIT_TOKEN")  # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ GitHub
PROJECT_PATH = os.environ.get("PROJECT_PATH", "/app/project")  # –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
INDEX_HTML_PATH = os.environ.get("INDEX_HTML_PATH", "/app/project/index.html")  # –ü—É—Ç—å –∫ index.html

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ["TELEGRAM_TOKEN", "ADMIN_USER_ID", "REPO_URL", "GIT_USERNAME", "GIT_EMAIL", "GIT_TOKEN"]
missing_vars = [var for var in required_env_vars if not os.environ.get(var)]
if missing_vars:
    logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
    exit(1)

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
IMAGES_FOLDER = os.path.join(tempfile.gettempdir(), "church_bot_images")
TEXT_FOLDER = os.path.join(tempfile.gettempdir(), "church_bot_text")
Path(IMAGES_FOLDER).mkdir(exist_ok=True)
Path(TEXT_FOLDER).mkdir(exist_ok=True)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
class TextProcessor:
    def __init__(self):
        self.current_text = None
        self.edited_text = None
        self.reset()
    
    def reset(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"""
        self.current_text = None
        self.edited_text = None
        
    def set_current(self, text):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç"""
        self.current_text = text
        
    def set_edited(self, text):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"""
        self.edited_text = text
        
    def get_final_text(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Ç–µ–∫—É—â–∏–π)"""
        return self.edited_text if self.edited_text else self.current_text

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞
text_processor = TextProcessor()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
        
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –±–æ–≥–æ—Å–ª—É–∂–µ–Ω–∏–π –Ω–∞ —Å–∞–π—Ç–µ –ø—Ä–∏—Ö–æ–¥–∞.\n\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (DOCX –∏–ª–∏ TXT) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º, –∏ —è –ø–æ–º–æ–≥—É –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
        
    await update.message.reply_text(
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç (DOCX, TXT) –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º\n"
        "2. –Ø –∏–∑–≤–ª–µ–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∞—é —Ç–µ–∫—Å—Ç\n"
        "3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ\n"
        "4. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —è –æ–±–Ω–æ–≤–ª—é —Å–∞–π—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ GitHub\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
        
    # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    text_processor.reset()
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    try:
        for file in os.listdir(IMAGES_FOLDER):
            os.remove(os.path.join(IMAGES_FOLDER, file))
        for file in os.listdir(TEXT_FOLDER):
            os.remove(os.path.join(TEXT_FOLDER, file))
        await update.message.reply_text("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {str(e)}")

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
    
    status_message = "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ index.html
    index_exists = os.path.exists(INDEX_HTML_PATH)
    status_message += f"üìÑ –§–∞–π–ª index.html: {'‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' if index_exists else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
    images_count = len(os.listdir(IMAGES_FOLDER)) if os.path.exists(IMAGES_FOLDER) else 0
    text_count = len(os.listdir(TEXT_FOLDER)) if os.path.exists(TEXT_FOLDER) else 0
    status_message += f"üñºÔ∏è –§–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_count}\n"
    status_message += f"üìù –§–∞–π–ª–æ–≤ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ —Ç–µ–∫—Å—Ç–æ–≤: {text_count}\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    has_current = text_processor.current_text is not None
    has_edited = text_processor.edited_text is not None
    status_message += f"üìã –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {'‚úÖ –ï—Å—Ç—å' if has_current else '‚ùå –ù–µ—Ç'}\n"
    status_message += f"‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {'‚úÖ –ï—Å—Ç—å' if has_edited else '‚ùå –ù–µ—Ç'}\n"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = {
        "ADMIN_USER_ID": ADMIN_USER_ID,
        "REPO_URL": REPO_URL,
        "GIT_USERNAME": GIT_USERNAME,
        "GIT_EMAIL": GIT_EMAIL,
        "GIT_TOKEN": "***" if GIT_TOKEN else None,
        "PROJECT_PATH": PROJECT_PATH,
        "INDEX_HTML_PATH": INDEX_HTML_PATH
    }
    
    status_message += "\nüîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
    for key, value in env_vars.items():
        status_icon = "‚úÖ" if value else "‚ùå"
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if key in ["GIT_TOKEN", "ADMIN_USER_ID"]:
            display_value = "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" if value else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        else:
            display_value = value if value else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        status_message += f"{status_icon} {key}: {display_value}\n"
    
    await update.message.reply_text(status_message)

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (DOCX, TXT)"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
        
    document = update.message.document
    file_ext = os.path.splitext(document.file_name)[1].lower()
    
    if file_ext not in ['.docx', '.txt']:
        await update.message.reply_text(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ DOCX –∏–ª–∏ TXT."
        )
        return
        
    status_message = await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é –¥–æ–∫—É–º–µ–Ω—Ç... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(document.file_id)
        file_path = os.path.join(TEXT_FOLDER, document.file_name)
        await file.download_to_drive(file_path)
        
        await status_message.edit_text(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω: {document.file_name}\n‚è≥ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
        if file_ext == '.docx':
            text = extract_text_from_docx(file_path)
        else:  # .txt
            text = extract_text_from_txt(file_path)
            
        if not text:
            await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            return
            
        await status_message.edit_text("‚úÖ –¢–µ–∫—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        text_processor.set_current(process_text(text))
        
        await status_message.edit_text("‚úÖ –¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–±–µ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–æ—Å—ã—Ö —á–µ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ f-—Å—Ç—Ä–æ–∫
        formatted_text = text_processor.current_text.replace('<br />', '\n').replace('<h3>', '*').replace('</h3>', '*')
        message = f"üìã –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:\n\n{formatted_text}\n\n–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(message) > 4000:
            chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
            for i, chunk in enumerate(chunks):
                if i == len(chunks) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
                    keyboard = InlineKeyboardMarkup([
                        [
                            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
                        ]
                    ])
                    await update.message.reply_text(chunk, reply_markup=keyboard)
                else:
                    await update.message.reply_text(chunk)
        else:
            keyboard = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                    InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
                ]
            ])
            await update.message.reply_text(message, reply_markup=keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
    
    status_message = await update.message.reply_text("üì• –ü–æ–ª—É—á–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file = await context.bot.get_file(photo.file_id)
        file_path = os.path.join(IMAGES_FOLDER, f"image_{photo.file_id}.jpg")
        await file.download_to_drive(file_path)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await status_message.edit_text("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\n‚è≥ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç...")
        
        try:
            # Import –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å pytesseract –¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
            import pytesseract
            from PIL import Image
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ Tesseract –¥–ª—è Docker
            pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image = Image.open(file_path)
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)
            text = pytesseract.image_to_string(image, lang="rus")
            
            if not text:
                await status_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
                
            await status_message.edit_text("‚úÖ –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —É—Å–ø–µ—à–Ω–æ\n‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç...")
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            text_processor.set_current(process_text(text))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await status_message.edit_text("‚úÖ –¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–±–µ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–æ—Å—ã—Ö —á–µ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ f-—Å—Ç—Ä–æ–∫
            formatted_text = text_processor.current_text.replace('<br />', '\n').replace('<h3>', '*').replace('</h3>', '*')
            message = f"üìã –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:\n\n{formatted_text}\n\n–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(message) > 4000:
                chunks = [message[i:i+4000] for i in range(0, len(message), 4000)]
                for i, chunk in enumerate(chunks):
                    if i == len(chunks) - 1:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫
                        keyboard = InlineKeyboardMarkup([
                            [
                                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
                            ]
                        ])
                        await update.message.reply_text(chunk, reply_markup=keyboard)
                    else:
                        await update.message.reply_text(chunk)
            else:
                keyboard = InlineKeyboardMarkup([
                    [
                        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit")
                    ]
                ])
                await update.message.reply_text(message, reply_markup=keyboard)
                
        except ImportError:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ (pytesseract, PIL).")
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pytesseract, PIL")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        await status_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

async def handle_edited_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
    
    if text_processor.current_text is None:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    text_processor.set_edited(update.message.text)
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤ HTML —Ñ–æ—Ä–º–∞—Ç
        processed_text = ""
        for line in text_processor.edited_text.split('\n'):
            line = line.strip()
            if line.startswith('*') and line.endswith('*'):
                # –≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ h3
                title = line.strip('*')
                processed_text += f"<h3>{title}</h3>\n"
            else:
                # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                processed_text += f"<br />{line}\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
        text_processor.set_current(processed_text)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
            ]
        ])
        await update.message.reply_text(
            "‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}\n{traceback.format_exc()}")
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞: {str(e)}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    
    if str(user_id) != ADMIN_USER_ID:
        return
        
    if query.data == "confirm":
        confirmation_message = await query.edit_message_text("‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –û–±–Ω–æ–≤–ª—è—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–∞–π—Ç–µ...")
        
        try:
            final_text = text_processor.get_final_text()
            if not final_text:
                await confirmation_message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            schedule_html = create_schedule_html(final_text)
            
            success = False
            
            # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Ñ–∞–π–ª –≤ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–æ–º–µ
            if os.path.exists(INDEX_HTML_PATH):
                try:
                    update_index_html(INDEX_HTML_PATH, schedule_html)
                    await query.message.reply_text("‚úÖ –§–∞–π–ª index.html —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ!")
                    success = True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}\n{traceback.format_exc()}")
                    await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {str(e)}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub
            if not success or REPO_URL:
                await query.message.reply_text("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub...")
                
                # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(REPO_PATH):
                    shutil.rmtree(REPO_PATH)
                    
                # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                repo_url_with_token = REPO_URL.replace('https://', f'https://{GIT_TOKEN}@')
                
                # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                repo = git.Repo.clone_from(repo_url_with_token, REPO_PATH)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ email –¥–ª—è –∫–æ–º–º–∏—Ç–æ–≤
                repo.config_writer().set_value("user", "name", GIT_USERNAME).release()
                repo.config_writer().set_value("user", "email", GIT_EMAIL).release()
                
                # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É index.html –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                index_path = os.path.join(REPO_PATH, "index.html")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º index.html
                update_index_html(index_path, schedule_html)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–º–º–∏—Ç–∞
                if repo.is_dirty(untracked_files=True):
                    # –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    repo.git.add(index_path)
                    commit_message = f"Update schedule - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    repo.git.commit('-m', commit_message)
                    repo.git.push()
                    
                    await query.message.reply_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ GitHub!")
                else:
                    await query.message.reply_text("‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            text_processor.reset()
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for file in os.listdir(IMAGES_FOLDER):
                os.remove(os.path.join(IMAGES_FOLDER, file))
            for file in os.listdir(TEXT_FOLDER):
                os.remove(os.path.join(TEXT_FOLDER, file))
                
            await confirmation_message.edit_text("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}\n{traceback.format_exc()}")
            await confirmation_message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
            
    elif query.data == "edit":
        if text_processor.current_text is None:
            await query.edit_message_text("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
            
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏–∑–±–µ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –∫–æ—Å—ã—Ö —á–µ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ f-—Å—Ç—Ä–æ–∫
        readable_text = text_processor.current_text.replace('<br />', '\n').replace('<h3>', '*').replace('</h3>', '*')
        
        await query.edit_message_text(
            "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n\n"
            "–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
            "1. –û–±–æ–∑–Ω–∞—á—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏: *–ó–∞–≥–æ–ª–æ–≤–æ–∫*\n"
            "2. –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—à–∏—Ç–µ –∫–∞–∫ –µ—Å—Ç—å\n"
            "3. –†–∞–∑–¥–µ–ª—è–π—Ç–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏\n\n"
            f"{readable_text}"
        )
        
    elif query.data == "cancel":
        # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        text_processor.reset()
        
        await query.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file in os.listdir(IMAGES_FOLDER):
            os.remove(os.path.join(IMAGES_FOLDER, file))
        for file in os.listdir(TEXT_FOLDER):
            os.remove(os.path.join(TEXT_FOLDER, file))

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Path(IMAGES_FOLDER).mkdir(exist_ok=True)
        Path(TEXT_FOLDER).mkdir(exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.environ.get("TELEGRAM_TOKEN")
        
        if not token:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
            return
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("cancel", cancel))
        application.add_handler(CommandHandler("status", status_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        application.add_handler(MessageHandler(filters.Document.ALL, handle_document))
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.User(int(ADMIN_USER_ID)), 
            handle_edited_text
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}\n{traceback.format_exc()}")

if __name__ == "__main__":
    main()